Traceback (most recent call last):
  File "/Users/KSIsleif/opt/anaconda3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/KSIsleif/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/KSIsleif/opt/anaconda3/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/KSIsleif/opt/anaconda3/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/KSIsleif/opt/anaconda3/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/KSIsleif/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/KSIsleif/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/KSIsleif/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import scipy.signal
# MatplotLib Settings:
plt.style.use('default') # Matplotlib Style w√§hlen
plt.figure(figsize=(8,3)) # Plot-Gr√∂√üe
plt.xkcd()
plt.rcParams['font.size'] = 10; # Schriftgr√∂√üe

fs = 1000.0 # 1 kHz sampling frequency
F1 = 10 # First signal component at 10 Hz
F2 = 60 # Second signal component at 60 Hz
T = 10 # 10s signal length
N0 = -10 # Noise level (dB)

t = np.r_[0:T:(1/fs)] # Sample times

# Zwei Sinussignale bei den Frequenzen F1 und F2
signal = np.sin(2 * F1 * np.pi * t) + np.sin(2 * F2 * np.pi * t) 

# Wei√ües Rauschen mit der Leistung N0
noise = np.random.randn(len(signal)) * 10**(N0/20.0) 
signal += noise

# PSD:
(f, S) = scipy.signal.periodogram(signal, 1./dt, scaling='density')
S_peak =  np.max(S)

plt.subplot(1,2,1)
plt.plot(t,signal, 'tab:blue')
plt.xlabel('Zeit (s)')
plt.ylabel('Amplitude')
plt.xlim(0,1)

plt.subplot(1,2,2)
plt.semilogy(f,S, color ="tab:red")
plt.axhline(y = S_peak,  color ="k", ls = '--', lw=1)
plt.axhline(y = 1e-3,  color ="k", ls = '--', lw=1)
plt.xlabel('Frequenz (Hz) ')
plt.ylabel(r'PSD $(\mathrm{V^2/Hz})$')
plt.annotate('SNR', xy=(42, 0.06),
            xytext=(42, 0.06), color = 'k'
            )
plt.annotate('', xy=(40, 1e-3),
            xytext=(40, 5), color = 'k',
            arrowprops=dict(arrowstyle="<->",
                            connectionstyle="arc3", color = 'k')
            )
plt.xlim([0,100])
plt.ylim([1e-7, 2e1])
plt.tight_layout()
plt.show()

print('Das SNR betr√§gt circa: ', 10*np.log(S_peak / 1e-3), 'dB')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Input [0;32mIn [3][0m, in [0;36m<cell line: 24>[0;34m()[0m
[1;32m     21[0m signal [38;5;241m+[39m[38;5;241m=[39m noise
[1;32m     23[0m [38;5;66;03m# PSD:[39;00m
[0;32m---> 24[0m (f, S) [38;5;241m=[39m scipy[38;5;241m.[39msignal[38;5;241m.[39mperiodogram(signal, [38;5;241m1.[39m[38;5;241m/[39m[43mdt[49m, scaling[38;5;241m=[39m[38;5;124m'[39m[38;5;124mdensity[39m[38;5;124m'[39m)
[1;32m     25[0m S_peak [38;5;241m=[39m  np[38;5;241m.[39mmax(S)
[1;32m     27[0m plt[38;5;241m.[39msubplot([38;5;241m1[39m,[38;5;241m2[39m,[38;5;241m1[39m)

[0;31mNameError[0m: name 'dt' is not defined
NameError: name 'dt' is not defined

